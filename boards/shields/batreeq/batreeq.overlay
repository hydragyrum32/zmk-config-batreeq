/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>
// #include "vik_connector.dtsi"

&pro_micro_spi { 
    status = "okay";
	cs-gpios = <&pro_micro 9 GPIO_ACTIVE_LOW>;
	shifter: 595@0 {
		compatible = "zmk,gpio-595";
		status = "okay";
		gpio-controller;
		spi-max-frequency = <200000>;
		reg = <0>;
		#gpio-cells = <2>;
		ngpios = <8>;
	};
};

/{
    scroll_encoder: encoder_sc {
        compatible = "alps,ec11";
        a-gpios = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        b-gpios = <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_UP)>;
        steps = <15>;
        status = "disabled";
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&scroll_encoder>;
        triggers-per-rotation = <15>;
    };
};

&scroll_encoder {
    status = "okay";
};

/{
    cirque_input_listener: cirque_input_listener {
        compatible = "zmk,input-listener";
        device = <&cirque>;                         /* Must be a phandle for your pinnacle@X node */
        y-invert;                                   /* Depends upon the Cirque's orientation */
    };
};

&pro_micro_spi {                                    /* You can use &pro_micro_spi or &spi# here */
    status = "okay";
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_LOW>;

    cirque: pinnacle@0 {
        compatible = "cirque,pinnacle";
        reg = <0>;                                   /* This matches the X in pinnacle@X */
        spi-max-frequency = <8000000>;               /* Maximum speed for spi0-2 is 8MHz on nRF52, may be different on your MCU */
        dr-gpios = <&pro_micro 1 GPIO_ACTIVE_HIGH>; /* REQUIRED. You can use &pro_micro or &gpio# here. */
        sensitivity = "1x";                          /* No more than 2x if you have the thick curved overlay! */
    };
};
/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <8>;
        rows = <5>;
        map = <
        RC(3,7) RC(0,7) RC(0,6) RC(0,5) RC(0,4)   RC(0,3) RC(0,2) RC(0,1) RC(0,0) RC(3,0)
        RC(3,6) RC(1,7) RC(1,6) RC(1,5) RC(1,4)   RC(1,3) RC(1,2) RC(1,1) RC(1,0) RC(3,1)
                RC(2,6) RC(2,5) RC(2,4)                   RC(2,3) RC(2,2) RC(2,1)
                                RC(3,5) RC(3,4)   RC(3,3) RC(3,2)
                                RC(4,5) RC(4,4)   RC(4,3) RC(4,2)
                                RC(5,1) RC(5,2) RC(5,3) RC(5,4) RC(5,5)
                                             
                                                                          

        >;
    };

    kscan0: kscan_0 {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        diode-direction = "col2row";

        col-gpios
            = <&shifter 7  GPIO_ACTIVE_HIGH> 
            , <&shifter 6 GPIO_ACTIVE_HIGH>
            , <&shifter 5  GPIO_ACTIVE_HIGH>
            , <&shifter 4  GPIO_ACTIVE_HIGH>
            , <&shifter 3  GPIO_ACTIVE_HIGH>
            , <&shifter 2 GPIO_ACTIVE_HIGH>
            , <&shifter 1 GPIO_ACTIVE_HIGH>
            , <&shifter 15 GPIO_ACTIVE_HIGH>
            ;

        row-gpios
            = <&pro_micro 4 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 5 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 6 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 7 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 8  (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            , <&pro_micro 10 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
            ;
    };

};
